pipeline {
    agent any

    environment {
        registryUrl = "http://localhost:5000"
        registry = "localhost:5000/youbetcha-loyalty-service"
        dockerImage = ''
    }

    //triggers {
       //cron('H */8 * * *') //regular builds
       //pollSCM('* * * * *') //polling for changes, here once a minute
    //}

    options {
    buildDiscarder(
        logRotator(
            // number of build logs to keep
            numToKeepStr:'10',
            // history to keep in days
            daysToKeepStr: '15',
            // artifacts are kept for days
            artifactDaysToKeepStr: '15',
            // number of builds have their artifacts kept
            artifactNumToKeepStr: '10'
         )
        )
    }

    stages {
        stage('Checkout') {
                steps {
                    git branch: 'master', credentialsId: 'alan/github', url: 'https://github.com/tomfin/youbetcha-loyalty-service.git/'
                }
        }

        stage('Compile') {
            steps {
                gradlew('clean', 'classes', 'testClasses')
                gradlew('compileJava')
            }
        }

        stage('Unit Tests') {
            steps {
                gradlew('test', 'jacocoTestReport')
            }
            post {
                always {
                    junit '**/build/test-results/test/TEST-*.xml'
                    step([
                           $class           : 'JacocoPublisher',
                           execPattern      : 'build/jacoco/test.exec',
                           classPattern     : 'build/classes/java/main',
                           sourcePattern    : 'src/main/java',
                           exclusionPattern : '**/*Test.class'
                    ])
                }
            }
        }

        stage('Build Docker image') {
            when {
               not {
                   buildingTag()
                }
            }
            steps {
                sh 'docker build -t youbetcha/youbetcha-loyalty-service:latest .'
             }
        }

        stage('Build Tagged Docker image') {
            when {
               buildingTag()
            }
            steps {
                script {
                    versionTag = sh(returnStdout:  true, script: "git describe --tags --abbrev=0").trim()
                    dockerImage = docker.build registry + ":" + versionTag
                }
            }
        }

        stage('Push Docker image') {
            when {
               buildingTag()
            }
            steps {
                script {
                    docker.withRegistry( registryUrl ) {
                        dockerImage.push()
                    }
                }
            }
        }

        stage('docker-compose CI stop and remove') {
            when {
                not {
                    buildingTag()
               }
            }
            steps {
                 script {
                 catchError{
                     def inspect = sh script: "docker container inspect -f '{{.State.Running}}' youbetcha-loyalty-service-ci"
                     if(inspect) {
                        sh "docker kill youbetcha-loyalty-service-ci"
                        sleep time: 5, unit: 'SECONDS'
                        sh "docker rm -fv youbetcha-loyalty-service-ci"
                     }
                 }
                 }
             }
        }

        stage('docker-compose Staging stop and remove') {
            when {
                buildingTag()
               }
            steps {
                 script {
                 catchError{
                      def inspect = sh script: "docker container inspect -f '{{.State.Running}}' youbetcha-loyalty-service-staging"
                      if(true) {
                         sh "docker kill youbetcha-loyalty-service-staging"
                         sleep time: 5, unit: 'SECONDS'
                         sh "docker rm -fv youbetcha-loyalty-service-staging"
                      }
                  }
                  }
             }
        }


        stage('Docker compose CI start up') {
             when {
                not {
                    buildingTag()
               }
            }
            steps {
                 sh 'docker-compose -f docker-compose-ci.yml rm -sfv'
                 sh 'docker-compose -f docker-compose-ci.yml up -d youbetcha-loyalty-service-ci'
            }
        }

        stage('Deploy to Staging - kill old instance and bring up new') {
            when {
                buildingTag()
            }
            steps {
                sh 'docker-compose -f docker-compose-staging.yml rm -sfv'
                sh 'docker-compose -f docker-compose-staging.yml up -d youbetcha-loyalty-service-staging'
            }
        }
    }
   post {
      success {
         slackSend channel: "#jenkins", message: "<Build success - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)>"
      }
      failure {
         slackSend channel: "#jenkins", message: "<You done fucked up - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)>"
      }
   }
}

def gradlew(String... args) {
    sh "./gradlew ${args.join(' ')} -s"
}
